program ::= <command> | <command> <program>

command ::= <assignmentArray> 
            | <assignmentArith> 
            | <assignmentBool> 
            | <skip> 
            | <ifThenElse> 
            | <while> 
            | <declareArith> 
            | <declareBool> 
            | <declareArray>
            | <declareChar>
            | <declareDouble>

declareArith ::= "int" <identifier> "=" <arithExp> | "double" <identifier> "=" <arithExp>

declareBool ::= "bool" <identifier> "=" <boolExp> 

declareArray ::= "array" <identifier> "[" <arithExp> "]" 


assignmentArith ::= <identifier> "=" <arithExp>

assignmentBool ::= <identifier> "=" <boolExp>

arrayAssignmentOneValue ::= <identifier> "[" <arithExp> "]" "=" <arithExp>

arrayAssignmentValues ::= <identifier> "=" "[" <arithExp> ["," <arithExp>]* "]" 

skip ::= "skip"

ifThenElse ::= "if" "("<boolExp>")" "then" "{"<program>"}" | "if" "("<boolExp>")" "then" "{"<program>"}" "else" "{"<program>"}"

while ::= "while" "(" <boolExp> ")" "{" <program> "}"

char ::= <lowerCase> | <upperCase>

<lowerCase> ::= "a-z"

<upperCase> ::= "A-Z"

digit ::= 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9

identifier ::= <lowerCase> | <lowerCase> <alphanum>

<alphanum> ::= <upperCase> <alphanum> | <lowerCase> <alphanum> | <naturalNum> <alphanum> | <upperCase> | <lowerCase> | <naturalNum>

arithExp ::= <arithTerm> ["+" <arithTerm>]* | <arithTerm> ["-" <arithTerm>]*

arithTerm ::= <arithFactor> ["*" <arithFactor>]* | <arithFactor> ["/" <arithFactor>]* | 
            <arithFactor> [{"^"} <arithFactor>]* | <arithFactor> ["sqrt" <arithFactor>]* 

arithFactor :== <integer> | <float> | "(" <arithExp> ")" | <identifier> "[" <arithExp> "]"

integer :==  "-" <naturalNum> | <naturalNum>

naturalNum :== <digit> | <digit> <naturalNum>

float :== <naturalNum> "." <naturalNum> [<exponent>] | <naturalNum> <exponent> | "-" <naturalNum> "." <naturalNum> [<exponent>] | "-" <naturalNum> <exponent>

exponent :== "e" ["+"|"-"] <naturalNum>

boolExp ::= <boolTerm> ["OR" <boolTerm>]*

boolTerm ::= <bfact> ["AND" <boolFact>]*

boolFact ::= "True"
            | "False"
            | "not" <boolExp>
            | "(" <boolExp> ")"
            | <arithExp> "<" <arithExp> 
            | <arithExp>  "<=" <arithExp> 
            | <arithExp> ">" <arithExp> 
            | <arithExp>  ">=" <arithExp> 
            | <arithExp> "==" <arithExp> 
            | <arithExp>  "!=" <arithExp> 
            | <identifier>


